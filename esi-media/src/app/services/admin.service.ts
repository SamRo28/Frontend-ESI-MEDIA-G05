import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, timeout, catchError, throwError, switchMap } from 'rxjs';

export interface Usuario {
  id?: string;
  nombre: string;
  apellidos: string;
  email: string;
  foto?: string;
  departamento: string;
  rol: 'Administrador' | 'Gestor' | 'Visualizador';
  bloqueado: boolean;
  apodo?: string;
}

@Injectable({
  providedIn: 'root'
})
export class AdminService {
  private apiUrl = 'http://localhost:8080';

  constructor(private http: HttpClient) {}

  getUsuarios(): Observable<Usuario[]> {
    return this.http.get<Usuario[]>(`${this.apiUrl}/users/listar`);
  }

  crearUsuario(userData: any): Observable<any> {
    console.log('üîó AdminService: Detectando tipo de usuario...');
    console.log('üì¶ Datos:', userData);
    console.log('üë§ Rol detectado:', userData.rol);

    // Decidir qu√© endpoint usar seg√∫n el rol
    if (userData.rol === 'Gestor') {
      return this.crearGestor(userData);
    } else {
      return this.crearAdministrador(userData);
    }
  }

  private crearAdministrador(userData: any): Observable<any> {
    console.log('üîó AdminService: Creando Administrador');
    const url = `${this.apiUrl}/administradores/crear-simple`;
    console.log('üåê URL Administrador:', url);
    
    return this.http.post(url, userData).pipe(
      timeout(10000),
      catchError((error) => {
        console.error('‚ùå Error creando Administrador:', error);
        return this.handleError(error);
      })
    );
  }

  private crearGestor(userData: any): Observable<any> {
    console.log('üîó AdminService: Creando Gestor de Contenido');
    const url = `${this.apiUrl}/gestores/crear`;
    console.log('üåê URL Gestor:', url);
    
    return this.http.post(url, userData).pipe(
      timeout(10000),
      catchError((error) => {
        console.error('‚ùå Error creando Gestor:', error);
        return this.handleError(error);
      })
    );
  }

  private handleError(error: any): Observable<never> {
    console.error('‚ùå Tipo de error:', error.name);
    console.error('‚ùå Status:', error.status);
    
    if (error.name === 'TimeoutError') {
      return throwError(() => ({
        message: 'La conexi√≥n tard√≥ demasiado tiempo. El usuario puede haberse creado exitosamente.',
        status: 'timeout'
      }));
    }
    return throwError(() => error);
  }

  updateProfile(userId: string, updates: any): Observable<any> {
    const url = `${this.apiUrl}/users/${userId}/profile`;
    console.log('üîÑ AdminService: Actualizando perfil en:', url);
    console.log('üì¶ Datos:', updates);
    
    return this.http.put(url, updates).pipe(
      timeout(10000),
      catchError((error) => {
        console.error('‚ùå Error actualizando perfil:', error);
        return this.handleError(error);
      })
    );
  }

  /**
   * Elimina un usuario y su contrase√±a asociada.
   * Primero obtiene los datos del usuario para encontrar el ID de la contrase√±a,
   * luego elimina la contrase√±a y finalmente elimina el usuario.
   */
  deleteUser(userId: string): Observable<any> {
    // URLs para las peticiones
    const userUrl = `${this.apiUrl}/users/${userId}`;
    
    console.log('AdminService: Iniciando proceso de eliminaci√≥n para usuario:', userId);
    
    // Paso 1: Primero obtenemos los datos del usuario para conseguir el ID de la contrase√±a
    return this.http.get<any>(`${this.apiUrl}/users/${userId}`).pipe(
      switchMap(usuario => {
        // Verificamos si el usuario tiene contrase√±a y obtenemos su ID
        if (usuario && usuario.contrasenia && usuario.contrasenia.id) {
          const passwordId = usuario.contrasenia.id;
          console.log('Encontrada contrase√±a con ID:', passwordId);
          
          // Paso 2: Eliminamos la contrase√±a primero
          return this.http.delete(`${this.apiUrl}/contrasenias/${passwordId}`).pipe(
            switchMap(() => {
              console.log('Contrase√±a eliminada correctamente, procediendo a eliminar el usuario');
              // Paso 3: Si la eliminaci√≥n de la contrase√±a fue exitosa, eliminamos el usuario
              return this.http.delete(userUrl);
            }),
            catchError(error => {
              // Si hay error al eliminar la contrase√±a, intentamos eliminar el usuario de todas formas
              console.error('Error al eliminar la contrase√±a:', error);
              console.log('Intentando eliminar el usuario a pesar del error en la contrase√±a');
              return this.http.delete(userUrl);
            })
          );
        } else {
          // Si el usuario no tiene contrase√±a, solo lo eliminamos a √©l
          console.log('Usuario no tiene contrase√±a asociada o no se pudo encontrar su ID');
          return this.http.delete(userUrl);
        }
      }),
      
      // Establecemos un timeout para toda la operaci√≥n
      timeout(10000),
      
      // Manejo de errores en la obtenci√≥n de datos del usuario o eliminaci√≥n del usuario
      catchError(error => {
        console.error('Error en el proceso de eliminaci√≥n:', error);
        return this.handleError(error);
      })
    );
  }
}